# Import required libraries
import pandas as pd
import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
airline_data =  pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/airline_data.csv', 
                            encoding = "ISO-8859-1",
                            dtype={'Div1Airport': str, 'Div1TailNum': str, 
                                   'Div2Airport': str, 'Div2TailNum': str})

# Create a dash application
app = dash.Dash(__name__)

# Build dash app layout
app.layout = html.Div(children=[ html.H1('Flight Details Statistics Dashboard', 
                                style={'textAlign': 'center', 'color': '#503D36',
                                'font-size': 35}),
                                html.Div(["Input Year: ", dcc.Input(id='input-year', value='2010', 
                                type='number', style={'height':'35px', 'font-size': 30}),], 
                                style={'font-size': 30}),
                                html.Br(),
                                html.Br(), 
                                # Segment 1
                                html.Div([
                                        html.Div(dcc.Graph(id='carrier-plot')),
                                        html.Div(dcc.Graph(id='weather-plot'))
                                ], style={'display': 'flex'}),
                                # Segment 2
                                html.Div([
                                        html.Div(dcc.Graph(id='nas-plot')),
                                        html.Div(dcc.Graph(id='security-plot'))
                                ], style={'display': 'flex'}),
                                # Segment 3
                                html.Div(dcc.Graph(id='late-plot'), style={'width':'65%'})
                                ])

""" Compute_info function description

This function takes in airline data and selected year as an input and performs computation for creating charts and plots.

Arguments:
    airline_data: Input airline data.
    entered_year: Input year for which computation needs to be performed.
    
Returns:
    Computed average dataframes for carrier delay, weather delay, NAS delay, security delay, and late aircraft delay.

"""
def compute_info(airline_data, entered_year):
    # Select data
    df =  airline_data[airline_data['Year']==int(entered_year)]
    # Compute delay averages
    avg_car = df.groupby(['Month','Reporting_Airline'])['CarrierDelay'].mean().reset_index()
    avg_weather = df.groupby(['Month','Reporting_Airline'])['WeatherDelay'].mean().reset_index()
    avg_NAS = df.groupby(['Month','Reporting_Airline'])['NASDelay'].mean().reset_index()
    avg_sec = df.groupby(['Month','Reporting_Airline'])['SecurityDelay'].mean().reset_index()
    avg_late = df.groupby(['Month','Reporting_Airline'])['LateAircraftDelay'].mean().reset_index()
    return avg_car, avg_weather, avg_NAS, avg_sec, avg_late

"""Callback Function

Function that returns fugures using the provided input year.

Arguments:

    entered_year: Input year provided by the user.
    
Returns:

    List of figures computed using the provided helper function `compute_info`.
"""
# Callback decorator
@app.callback( [
               Output(component_id='carrier-plot', component_property='figure'),
               Output(component_id='weather-plot', component_property='figure'),
               Output(component_id='nas-plot', component_property='figure'),
               Output(component_id='security-plot', component_property='figure'),
               Output(component_id='late-plot', component_property='figure')
               ],
               Input(component_id='input-year', component_property='value'))
# Computation to callback function and return graph
def get_graph(entered_year):
    
    # Compute required information for creating graph from the data
    avg_car, avg_weather, avg_NAS, avg_sec, avg_late = compute_info(airline_data, entered_year)
            
    # Line plot for carrier delay
    carrier_fig = px.line(avg_car, x='Month', y='CarrierDelay', color='Reporting_Airline', title='Average carrrier delay time (minutes) by airline')
    # Line plot for weather delay
    weather_fig = px.line(avg_weather, x='Month', y='WeatherDelay', color='Reporting_Airline', title='Average weather delay time (minutes) by airline')
    # Line plot for nas delay
    nas_fig = px.line(avg_NAS, x='Month', y='NASDelay', color='Reporting_Airline', title='Average NAS delay time (minutes) by airline')
    # Line plot for security delay
    sec_fig = px.line(avg_sec, x='Month', y='SecurityDelay', color='Reporting_Airline', title='Average security delay time (minutes) by airline')
    # Line plot for late aircraft delay
    late_fig = px.line(avg_late, x='Month', y='LateAircraftDelay', color='Reporting_Airline', title='Average late aircraft delay time (minutes) by airline')
            
    return[carrier_fig, weather_fig, nas_fig, sec_fig, late_fig]

# Run the app
if __name__ == '__main__':
    app.run_server()

Terminal

theia@theia-frschm:/home/project$ pip3.8 install pandas dash
Defaulting to user installation because normal site-packages is not writeable
Requirement already satisfied: pandas in /home/theia/.local/lib/python3.8/site-packages (2.0.3)
Requirement already satisfied: dash in /home/theia/.local/lib/python3.8/site-packages (2.17.1)
Requirement already satisfied: python-dateutil>=2.8.2 in /home/theia/.local/lib/python3.8/site-packages (from pandas) (2.8.2)
Requirement already satisfied: numpy>=1.20.3 in /home/theia/.local/lib/python3.8/site-packages (from pandas) (1.24.4)
Requirement already satisfied: tzdata>=2022.1 in /home/theia/.local/lib/python3.8/site-packages (from pandas) (2024.1)
Requirement already satisfied: pytz>=2020.1 in /home/theia/.local/lib/python3.8/site-packages (from pandas) (2022.1)
Requirement already satisfied: typing-extensions>=4.1.1 in /home/theia/.local/lib/python3.8/site-packages (from dash) (4.3.0)
Requirement already satisfied: dash-html-components==2.0.0 in /home/theia/.local/lib/python3.8/site-packages (from dash) (2.0.0)
Requirement already satisfied: requests in /home/theia/.local/lib/python3.8/site-packages (from dash) (2.28.0)
Requirement already satisfied: dash-core-components==2.0.0 in /home/theia/.local/lib/python3.8/site-packages (from dash) (2.0.0)
Requirement already satisfied: importlib-metadata in /home/theia/.local/lib/python3.8/site-packages (from dash) (4.12.0)
Requirement already satisfied: setuptools in /home/theia/.local/lib/python3.8/site-packages (from dash) (67.4.0)
Requirement already satisfied: plotly>=5.0.0 in /home/theia/.local/lib/python3.8/site-packages (from dash) (5.22.0)
Requirement already satisfied: dash-table==5.0.0 in /home/theia/.local/lib/python3.8/site-packages (from dash) (5.0.0)
Requirement already satisfied: retrying in /home/theia/.local/lib/python3.8/site-packages (from dash) (1.3.4)
Requirement already satisfied: nest-asyncio in /home/theia/.local/lib/python3.8/site-packages (from dash) (1.5.6)
Requirement already satisfied: Flask<3.1,>=1.0.4 in /home/theia/.local/lib/python3.8/site-packages (from dash) (2.2.2)
Requirement already satisfied: Werkzeug<3.1 in /home/theia/.local/lib/python3.8/site-packages (from dash) (2.2.2)
Requirement already satisfied: click>=8.0 in /home/theia/.local/lib/python3.8/site-packages (from Flask<3.1,>=1.0.4->dash) (8.1.3)
Requirement already satisfied: Jinja2>=3.0 in /home/theia/.local/lib/python3.8/site-packages (from Flask<3.1,>=1.0.4->dash) (3.1.2)
Requirement already satisfied: itsdangerous>=2.0 in /home/theia/.local/lib/python3.8/site-packages (from Flask<3.1,>=1.0.4->dash) (2.1.2)
Requirement already satisfied: zipp>=0.5 in /home/theia/.local/lib/python3.8/site-packages (from importlib-metadata->dash) (3.8.1)
Requirement already satisfied: tenacity>=6.2.0 in /home/theia/.local/lib/python3.8/site-packages (from plotly>=5.0.0->dash) (8.0.1)
Requirement already satisfied: packaging in /home/theia/.local/lib/python3.8/site-packages (from plotly>=5.0.0->dash) (21.3)
Requirement already satisfied: six>=1.5 in /home/theia/.local/lib/python3.8/site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)
Requirement already satisfied: MarkupSafe>=2.1.1 in /home/theia/.local/lib/python3.8/site-packages (from Werkzeug<3.1->dash) (2.1.1)
Requirement already satisfied: idna<4,>=2.5 in /home/theia/.local/lib/python3.8/site-packages (from requests->dash) (3.3)
Requirement already satisfied: certifi>=2017.4.17 in /home/theia/.local/lib/python3.8/site-packages (from requests->dash) (2022.6.15)
Requirement already satisfied: charset-normalizer~=2.0.0 in /home/theia/.local/lib/python3.8/site-packages (from requests->dash) (2.0.12)
Requirement already satisfied: urllib3<1.27,>=1.21.1 in /home/theia/.local/lib/python3.8/site-packages (from requests->dash) (1.26.11)
Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /home/theia/.local/lib/python3.8/site-packages (from packaging->plotly>=5.0.0->dash) (3.0.9)

[notice] A new release of pip is available: 23.0.1 -> 24.1.1
[notice] To update, run: python3.8 -m pip install --upgrade pip
theia@theia-frschm:/home/project$ python3.8 dash_interactivity.py
Dash is running on http://127.0.0.1:8050/

 * Serving Flask app 'dash_interactivity'
 * Debug mode: off
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8050
Press CTRL+C to quit
127.0.0.1 - - [02/Jul/2024 15:39:30] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [02/Jul/2024 15:39:30] "GET /_dash-layout HTTP/1.1" 200 -
127.0.0.1 - - [02/Jul/2024 15:39:30] "GET /_dash-dependencies HTTP/1.1" 200 -
127.0.0.1 - - [02/Jul/2024 15:39:31] "GET /_dash-component-suites/dash/dcc/async-graph.js HTTP/1.1" 304 -
127.0.0.1 - - [02/Jul/2024 15:39:31] "GET /_dash-component-suites/plotly/package_data/plotly.min.js HTTP/1.1" 304 -
127.0.0.1 - - [02/Jul/2024 15:39:31] "POST /_dash-update-component HTTP/1.1" 200 -
^Ctheia@theia-frschm:/home/project$ 
